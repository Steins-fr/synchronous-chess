name: Angular CI Pull request Game App

on:
  pull_request:

jobs:
  angular-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Install dependencies
        run: |
          cd application/frontend/game-app
          yarn install

      - name: Pull Angular cli
        run: docker pull trion/ng-cli:8.3.2

      - name: Run Angular lint
        run: |
          docker run --rm \
            -w ${GITHUB_WORKSPACE}/application/frontend/game-app \
            -v ${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE} \
            trion/ng-cli:8.3.2 \
            ng lint;

  angular-test-karma:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Install dependencies
        run: |
          cd application/frontend/game-app
          yarn install

      - name: Pull Angular cli Karma
        run: docker pull trion/ng-cli-karma:8.3.2

      - name: Run Karma
        run: |
          docker run --rm \
            -w ${GITHUB_WORKSPACE}/application/frontend/game-app \
            -v ${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE} \
            trion/ng-cli-karma:8.3.2 \
            ng test --code-coverage --progress false --watch false;

      - name: SonarQube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd application/frontend/game-app
          export SONAR_SCANNER_VERSION=4.0.0.1744;
          export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux;
          rm -rf $SONAR_SCANNER_HOME;
          mkdir -p $SONAR_SCANNER_HOME;
          curl -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip;
          unzip $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/;
          rm $HOME/.sonar/sonar-scanner.zip;
          export PATH=$SONAR_SCANNER_HOME/bin:$PATH;
          export SONAR_SCANNER_OPTS="-server";
          sonar-scanner \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.projectKey=Steins-fr_synchronous-chess \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.login=${{ secrets.SONAR_LOGIN }} \
            -Dsonar.typescript.lcov.reportPaths=coverage/synchronous-chess/lcov.info \
            -Dsonar.typescript.tsconfigPath=tslint.json \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.sources=src/app \
            -Dsonar.exclusions=**/node_modules/**,**/*.spec.ts \
            -Dsonar.tests=src/app \
            -Dsonar.test.inclusions=**/*.spec.ts;

  angular-test-e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Install dependencies
        run: |
          cd application/frontend/game-app
          yarn install

      - name: Pull Angular cli e2e
        run: docker pull trion/ng-cli-e2e:8.3.2

      - name: Run e2e
        run: |
          docker run --rm \
            -w ${GITHUB_WORKSPACE}/application/frontend/game-app \
            -v ${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE} \
            trion/ng-cli-e2e:8.3.2 \
            ng e2e;

  deploy-staging-frontend:
    runs-on: ubuntu-latest
    needs: [angular-lint, angular-test-karma, angular-test-e2e]
    steps:
      - uses: actions/checkout@v1

      - name: Install dependencies
        run: |
          cd application/frontend/game-app
          yarn install

      - name: Deploy to staging
        run: |
          cd application/frontend/game-app
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_STAGING_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_STAGING_SECRET_KEY }}
          yarn build:staging:deploy;

  deploy-staging-backend:
    runs-on: ubuntu-latest
    needs: [angular-lint, angular-test-karma, angular-test-e2e]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v1
      - name: Build layer
        run: |
          cd application/backend/layers/room-manager
          yarn
          yarn build
      - name: Build lambda onConnect
        run: |
          cd application/backend/websocket-api/onconnect
          yarn
          yarn build
      - name: Build lambda onDisconnect
        run: |
          cd application/backend/websocket-api/ondisconnect
          yarn
          yarn build
      - name: Build lambda sendMessage
        run: |
          cd application/backend/websocket-api/sendmessage
          yarn
          yarn build
      - name: Terraform init
        uses: hashicorp/terraform-github-actions/init@v0.4.6
        with:
          args: '-backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="bucket=${{ secrets.AWS_BUCKET }}" -backend-config="key=${{ secrets.AWS_STAGING_BUCKET_KEY }}"'
        env:
          TF_ACTION_WORKING_DIR: "./infrastructure"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_BACKEND_STAGING_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_BACKEND_STAGING_SECRET_KEY }}
      - name: Terraform validate
        uses: hashicorp/terraform-github-actions/validate@v0.4.6
        env:
          TF_ACTION_WORKING_DIR: "./infrastructure"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_BACKEND_STAGING_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_BACKEND_STAGING_SECRET_KEY }}
      - name: Terraform plan
        uses: hashicorp/terraform-github-actions/plan@v0.4.6
        with:
          args: "-var 'stage=staging' -out=tfplan -input=false"
        env:
          TF_ACTION_WORKING_DIR: "./infrastructure"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_BACKEND_STAGING_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_BACKEND_STAGING_SECRET_KEY }}
      - name: Terraform apply
        uses: hashicorp/terraform-github-actions/apply@v0.4.6
        with:
          args: "-input=false tfplan"
        env:
          TF_ACTION_WORKING_DIR: "./infrastructure"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_BACKEND_STAGING_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_BACKEND_STAGING_SECRET_KEY }}
